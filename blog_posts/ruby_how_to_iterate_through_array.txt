PHP, for all its warts, is pretty good on this count. Why can't I do this for arrays? If I want to remember just one method, I guess I can use each_index (since it makes both the index and value available), but it's annoying to have to do array[index] instead of just value.. Oh right, I forgot about array.each_with_index. I'm not saying that Array -> |value,index| and Hash -> |key,value| is not insane (see Horace Loeb's comment), but I am saying that there is a sane way to expect this arrangement.. When I am dealing with arrays, I am focused on the elements in the array (not the index because the index is transitory). When I am dealing with hashes, I am often more focused on the keys than the values, and I am usually dealing with keys and values in that order, either key => value or hash[key] = value.. If you want duck-typing, then either explicitly use a defined method as Brent Longborough showed, or an implicit method as maxhawkins showed.. Ruby is all about accommodating the language to suit the programmer, not about the programmer accommodating to suit the language. As for the original question, "What is the ârightâ way to iterate through an array in Ruby?", well, I think the core way (i.e. But Ruby is all about powerful syntactic sugar and object oriented power, but anyway here is the equivalent for hashes, and the keys can be ordered or not:. So, my answer is, "The ârightâ way to iterate through an array in Ruby depends on you (i.e. Now, I want to ask another question, "What is the ârightâ way to iterate through a Range in Ruby backwards?"!  (This question is how I came to this page.). Well, I don't actually mind doing that too much, but when I am teaching going backwards, I want to show my students a nice symmetry (i.e. but I want to teach pure Ruby rather than object oriented approaches (just yet). I believe this is impossible without defining a pred method, which means modifying the Range class to use it. I think there is no one right way. It may seem like a lot to remember, but don't worry, you can get by without knowing all of them. The other answers are just fine, but I wanted to point out one other peripheral thing: Arrays are ordered, whereas Hashes are not in 1.8. Trying to do the same thing consistently with arrays and hashes might just be a code smell, but, at the risk of my being branded as a codorous half-monkey-patcher, if you're looking for consistent behaviour, would this do the trick?:. Each item has 2 elements: a menu label and a URL, so a hash seemed right, but the '/' URL for 'Home' always appeared last (as you'd expect for a hash), so menu items appeared in the wrong order.. Adding extra values for each menu item (e.g. Obvious, but worth stating: I suggest checking if the length of the array is divisible by the slice value.. If you use the enumerable mixin (as Rails does) you can do something similar to the php snippet listed. However, this does cause problems when you have a recursive array or a hash with array values. As for the question of whether this is a code smell, I'm not sure. The right way is the one you feel most comfortable with and which does what you want it to do. If you are comfortable with certain way of doings things, do just it, unless it doesn't work - then it is time to find better way.. Let's take a look at that first.. Whew! That's a mouthful. I'll give you the key-value pairs to start with. Let's take a look at that first.. Whew! That's a mouthful. I'll give you the key-value pairs to start with